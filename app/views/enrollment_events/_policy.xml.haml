%id
  %id= policy.eg_id
- if policy.broker.present?
  - broker = policy.broker
  %broker
    %id
      %id= broker.npn
    %name= broker.full_name
    %is_active= broker.is_active
%enrollees
  - subscriber = policy.subscriber
  - subscriber_person = subscriber.person
  - enrollees.each do |enrollee|
    - person = enrollee.person
    %enrollee
      %member
        %id
          %id= "urn:openhbx:hbx:dc0:resources:v1:person:hbx_id##{person.authority_member.hbx_member_id}"
          - if enrollee.cp_id.present? || enrollee.c_id.present?
            %alias_ids
              - if enrollee.c_id.present?
                %alias_id
                  %id= "urn:openhbx:hbx:me0:resources:v1:person:member_id##{enrollee.c_id}"
              - if enrollee.cp_id.present?
                %alias_id
                  %id= "urn:openhbx:hbx:me0:resources:v1:person:policy_id##{enrollee.cp_id}"
        = render "people/person", :person => person
        - unless enrollee.subscriber?
          %person_relationships
            %person_relationship
              %relationship_uri= "urn:openhbx:terms:v1:individual_relationship##{enrollee.relationship_status_code.gsub(' ', '_')}"
              %object_individual
                %id= "urn:openhbx:hbx:dc0:resources:v1:person:hbx_id##{subscriber_person.authority_member.hbx_member_id}"
        %person_demographics
          - if !person.authority_member.ssn.blank?
            %ssn= person.authority_member.ssn
          %sex= "urn:openhbx:terms:v1:gender##{person.authority_member.gender}"
          %birth_date= simple_date_for(person.authority_member.dob)
      %is_subscriber= enrollee.subscriber?
      %benefit
        %premium_amount= enrollee.pre_amt.round(2)
        %begin_date= simple_date_for(enrollee.coverage_start)
        - if !enrollee.coverage_end.blank?
          %end_date= simple_date_for(enrollee.coverage_end)
        - if enrollee.cp_id.present?
          %carrier_assigned_policy_id= enrollee.cp_id
        - if enrollee.c_id.present?
          %carrier_assigned_enrollee_id= enrollee.c_id
- if policy.has_responsible_person?
  %responsible_party
    - responsible_party = policy.responsible_person
    = render "people/responsible_person", :person => responsible_party, :responsible_party => responsible_party
%enrollment
  - plan = Caches::CustomCache.lookup(Plan, :cv2_plan_cache, policy.plan_id) { policy.plan }
  %plan
    %id
      %id= plan.hios_plan_id
      - unless policy.carrier_specific_plan_id.blank?
        %alias_ids
          %alias_id
            %id= policy.carrier_specific_plan_id
    %name= plan.name
    %active_year= plan.year
    %is_dental_only= plan.coverage_type == "dental"
    - carrier = Caches::CustomCache.lookup(Carrier, :cv2_carrier_cache, plan.carrier_id) { plan.carrier }
    %carrier
      %id
        %id= carrier.hbx_carrier_id
      %name= carrier.name
    %metal_level= "urn:openhbx:terms:v1:plan_metal_level##{plan.metal_level.downcase}"
    %coverage_type= "urn:openhbx:terms:v1:qhp_benefit_coverage##{plan.coverage_type.downcase}"
    %ehb_percent= plan.ehb*100
  - if policy.is_shop?
    %shop_market
      - employer = policy.employer
      %employer_link
        %id
          %id= "urn:openhbx:terms:v1:employer:id##{employer.hbx_id}"
        %name= employer.name
        - if !employer.dba.blank?
          %dba= employer.dba
        %fein= employer.fein
        = render :partial => "enrollment_events/employer_with_contacts", :object => employer
        = render :partial => "enrollment_events/employer_with_office_locations", :object => employer
      %total_employer_responsible_amount=(policy.tot_emp_res_amt).round(2)
      - if policy.is_cobra?
        - if policy.cobra_eligibility_date.present?
          %cobra_eligibility_date= simple_date_for(policy.cobra_eligibility_date)
      - unless policy.composite_rating_tier.blank?
        %composite_rating_tier_name= policy.composite_rating_tier
  - else
    %individual_market
      %is_carrier_to_bill true
      %applied_aptc_amount= (policy.applied_aptc).round(2)
      %assistance_effective_date= simple_date_for(policy.assistance_effective_date) if policy.assistance_effective_date
  %premium_total_amount= policy.pre_amt_tot.round(2)
  %total_responsible_amount= policy.tot_res_amt.round(2)
  - unless policy.rating_area.blank?
    %rating_area= policy.rating_area
%request_submitted_timestamp= policy.created_at.iso8601 if policy.created_at
%created_at= policy.created_at.iso8601 if policy.created_at
- if !policy.updated_at.blank?
  %modified_at= policy.updated_at.iso8601
